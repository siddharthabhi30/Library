npm install

express hellowordl


 SET DEBUG=hello:* & npm start - to start the app

 npm install --save-dev nodemon  - to install for only development

 SET DEBUG=express-locallibrary-tutorial:* & npm run devstart

get request from nodejs

 var options = {
    host: 'localhost',
    port: 7474,
    path: '/db/data',
    method: 'GET',
    headers: {
        accept: 'application/json'
    }
};

console.log("Start");
var x = http.request or get without  .end() (options,function(res){
    use utf *
    console.log("Connected");
    res.on('data',function(data){
        console.log(data);
    });
});


x.end();


require('http').get('http://httpbin.org/ip', (res) => {
    res.setEncoding('utf8');
    res.on('data', function (body) {
        console.log(body);
    });
});

mongodb

npm install mongoose

//here 123 is the input in nodejs
node app 123

we can store system variable by export name=sid in cmd

see it in process.env.var_name 


`${data}`  here \we are converting something to utf 8
==================================================================

Again nodejs with typescript traversy media

tscconfig we can change wjere ts to js happen we can control it 

tsc --init  //init for typescript

npom install express

npm i -D typescript ts-node nodemon @types/node @types/express

 
=====================
 taking argument in node js

 const author=process.argv[2]||'unknown';

const title=process.argv[3]||'new blog post';

node myApp arg1 arg2 

ss

=====================================

nodemon actyually starts js file with watching

versioning -- the :^ sign represent if new versio is available ... download it 



=============================

 setTimeout(() => 
    {
      this.flip=false;
    },
    0);

window.location.reload();


we can use lite serveer from npm init and use it to create a server which router to all the files
see "one" prij in typescript proj

==============================================

nodejs with typescript
https://medium.com/@pankaj.itdeveloper/getting-started-using-typescript-with-node-js-and-express-6aff573667d5

npm init -y

npm install -D typescript

//for tsconfig.json
npx tsc -init

npm install express @types/express

npm run tsc

node servewr.js

---------=================================

should not use 
let no:number=34;
because typscript has its own inference

Object type typescript

const person:{
    name:string,
    age:number
}={
    name:'maximulia',
    age:34

}
console.log(person.name)

or basic just person={
  fds
  dfs
}
let typescipt do its job

person;Object == will give errors ,, because we are not telling anything to typescript
===========================


type Combinable=number|string;

type CombinableDescriptor='as-number' | 'as-text' ;


function combine(
  input1: Combinable,
  input2: number | string, //this is union type
  resultConversion:CombinableDescriptor // this is literal types



  ===============================


this is OK
  function return type cant be undefined if it is not returnning anything 
function add(n1:number,n2:number):undefined | void{
    return;
   
}

==========================================================

if we say my_var_having_funtion:Function;;
//Function is a type

========================


function add(n1:number,n2:number){
    return n1+n2;
   
}

function add2(n1:number,n2:number){
    return n1+n2+"s";
   
}
let combine=add;



let combine: (n1: number, n2: number) => number

we dont have to write this normally but if explicitely a variable is defined 
and used else where then we need this thing

========================================




call back function

if in recursive function passing at the end the argument receiving functions says w return void then we 
really return void irrespective all the front functions are returnning value

===============


in call back function get the return type of rool function that has made the
the function body 




void says we ignore what are you doing

typscript is not strict in call back function return type


That's correct. As you learned, callback 
functions can return something, even if the 
argument on which they're passed does NOT expect a returned value.
========================
nnn


