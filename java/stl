 PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();        
 Iterator itr = pQueue.iterator(); 
        while (itr.hasNext()) 
            System.out.println(itr.next()); 
.add

PriorityQueue<Integer> pq = new PriorityQueue<Integer> (
  new Comparator<Integer> () {
    public int compare(Integer a, Integer b) {
       return b - a;
    }
  }
);


PriorityQueue<Integer> pq = new PriorityQueue<Integer> (
  new Comparator<Integer> () {
    public int compare(Integer a, Integer b) {
       return b - a; //this is max queue
    }
  }
);

add
peek  -see the top 
poll  - get the top
-------------------------------------

Comparator for a class

class ourclass implements Comparable<ourclass>

 public int compareTo(cc o) {
        return (o.getUu()-this.getUu());
    }
    
     ArrayList<Integer> tr=new ArrayList<Integer>();
Collections.sort(tr);




or

custom comparator like lambdA

class PlayerRankingComparator implements Comparator<cc> {



    @Override
    public int compare(cc o1, cc o2) {
        return (o2.getUu()-o1.getUu());
    }
}
Collections.sort(trArraylist , new PlayerRankingComparator());


(o1.two-o2.two) ascending

or


  Collections.sort(people, (p1,p2)->p1.getLastName().compareTo(p2.getLastName()));
-------------------------------


Set


Set<String> hash_Set 
            = new HashSet<String>(); 


hs.contains(check)

 hs.remove("B");

 for (String value : hs) 
            System.out.print(value 

Iterator<String> i = h.iterator();  // <string > can be removed
        while (i.hasNext()) 
            System.out.println(i.next()); 

clear()

isEmpty()

size()
---------------------------------------------------------


map

hm1.remove(new Integer(4)); 
 Map<Integer, Integer> hm
                = new TreeMap<Integer, Integer>();
Map<String, Integer> hm 
            = new HashMap<String, Integer>(); 
  
        hm.put("a", new Integer(100)); 

for (Map.Entry<String, Integer> e : hm.entrySet())
            System.out.println(e.getKey() + " "
                    + e.getValue());


containsKey(Object)
get(Object)

size()


------------------------------------------------------

arraylist   2d

   
     ArrayList<ArrayList<Integer> > x
                = new ArrayList<ArrayList<Integer> >();
        x.add(new ArrayList<Integer>());
        x.get(0).add(33);
        int[][] twoD_arr = new int[10][20];
          ArrayList<int[]> aa= new ArrayList<int[]>();
       aa.add(new int[324]);
        System.out.println(aa.get(0).length);

          int[] a={324,23,21,54,2};
        Arrays.sort(a);
    

---------------------------------------------


Stack

 Stack<Integer> st;
        st = new Stack<Integer>();
 Integer y = (Integer) stack.pop(); 
push ,
pop  peak empty
size


-----------------------------------

------------------------------------------------------

character 

  Character a=(sc.next().charAt(0));

----------------------------------------------------------

single line input  --better option


        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String s= br.readLine();
     String[] s1 = s.split(" ");
 Character a=s1[i].charAt(0);

 er.equals(er2)  for equality of string
 can be used both for static and real object string 

 --------------------------------------------

 dynamic string 
 StringBuilder myName = new StringBuilder("domanokz");
myName.setCharAt(4, 'x');

System.out.println(myName);

or break it in arr of characters
String S="abcdef";
        char[] aa=S.toCharArray();
        for (int i = 0; i < aa.length; i++) {
            System.out.println(aa[i]);
        }
 --------------------------------
 String my=s.substring(2,3);
 init index and end index  
 end index not included
 second argument is not length


 -------------------------------

  static int[] rtr=new int[43];
   above class definition for global variables

   ------------------------------------
   Collections.binarysearch is giving errors error
   
   
   -------------------------------------------
   
    static int lower_bound(int[] a,int val){
            int lo=0;
            int hi=a.length-1;
            int mid;
            int index=a.length;
            while(lo<=hi){
                mid=lo +(hi-lo)/2;
                if(a[mid]<val){
                    lo=mid+1;
                }
                else{
                    hi=mid-1;
                    index=mid;
                }

            }
            return index;

        }
        
      ------------------------------------------
      
        static int upper_bound(int[] a,int val){
        int lo=0;
        int hi=a.length-1;
        int mid=0;

        int index=a.length;
        while(lo<hi){

            mid=lo +(hi-lo)/2;
            if(a[mid]<=val){
                lo=mid+1;
            }
            else{
                hi=mid;
                index=hi;
            }

        }
        return index;

    }
   ----------------------------------------------------
     long aa= 17100000000L;
     LONG LONG

     -----------------------

     Queue<String> pq = new PriorityQueue<>(); 
      Iterator iterator = pq.iterator(); 
  
        while (iterator.hasNext()) { 
            System.out.print(iterator.next() + " "); 
        } 


  ----------------------------------------------------------

   if(a>0) System.out.println("frfgre");
   --if doesnt work on normal positive integer

   ------------------------------

   boolean cant be converted to int